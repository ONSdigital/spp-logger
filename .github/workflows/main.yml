---
name: Publish Package

on: push

permissions:
  contents: write
  packages: write

jobs:
#  python-build:
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
#        poetry-version: [ '1.1.13' ]
#        os: [ ubuntu-latest ]
#    defaults:
#      run:
#        working-directory: ./python
#    runs-on: ${{ matrix.os }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Run image
#        uses: abatilo/actions-poetry@v2.0.0
#        with:
#          poetry-version: ${{ matrix.poetry-version }}
#
#      - name: Install Dependencies
#        run: poetry install
#
#      - name: Run Unit Test
#        run: poetry run pytest
#
#
#  publish-python:
#    defaults:
#      run:
#        working-directory: ./python
#
#    runs-on: ubuntu-latest
#
#    needs: python-build
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.6'
#
#      - name: Run image
#        uses: abatilo/actions-poetry@v2.0.0
#        with:
#          poetry-version: '1.1.13'
#
#      - name: Remove Dev Dependencies
#        run: poetry install --no-dev
#
#      - name: Build
#        run: poetry build
#
#      - name: Get Version
#        run: poetry version -s > spp-logger.version
#
#      - name: Create GitHub release
#        uses: softprops/action-gh-release@v1
#        if: startsWith(github.ref, 'refs/tags/')
#        with:
#          files: |
#            python/dist/*.whl
#            python/dist/*.tar.gz
#            python/spp-logger.version
#
  publish-go:
    permissions:
      contents: write # for wangyoucao577/go-release-action to upload release assets

    name: Release Go Binary
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # build and publish in parallel
        goos: [ linux]
        goarch: [ "386"]
        exclude:
          - goarch: "386"
            goos: darwin
          - goarch: arm64
            goos: windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set BUILD_TIME env
        run: echo BUILD_TIME=$(date -u +%Y%m%d-%H%M) >> ${GITHUB_ENV}

      # - name: Go Release Binaries spp-logger
        # uses: ajorpheus/go-release-action@504315b5fb0d6c52afde22a6860b7630b49f5333
        # if: startsWith(github.ref, 'refs/tags/')
        # with:
          # github_token: ${{ secrets.GITHUB_TOKEN }}
          # goos: ${{ matrix.goos }}
          # goarch: ${{ matrix.goarch }}
          # goversion: "https://dl.google.com/go/go1.13.1.linux-amd64.tar.gz"
          # project_path: "./golang/spp_logger"
          # asset_name: "spp-logger-${{ env.BUILD_TIME }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          # extra_files: LICENSE README.md
          #

goreleaser:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      -
        name: Fetch all tags
        run: git fetch --force --tags
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          workdir: "golang/spp_logger"
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
